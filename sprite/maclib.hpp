
/* Note: This file is automatically generated by scripts/generate_maclib.py */

#include <boost/preprocessor.hpp>

// Constructor Definition (CD)
//   CD = (ident, name, arity) where
//       ident: the C++ identifier
//       name: the node label (a string)
//       arity: the constructor arity

#define CD_IDENT(CD) BOOST_PP_TUPLE_ELEM(3,0,CD)
#define CD_NAME(CD)  BOOST_PP_TUPLE_ELEM(3,1,CD)
#define CD_ARITY(CD) BOOST_PP_TUPLE_ELEM(3,2,CD)

// ======

#define TYPE_II(CD,n)                                       \
    CONSTRUCTOR(CD_IDENT(CD), CD_NAME(CD), CD_ARITY(CD), n) \
  /**/
#define TYPE_I(z,n,type) TYPE_II(BOOST_PP_SEQ_ELEM(n,type), n)

// API: TYPE
#define TYPE(type) BOOST_PP_REPEAT(BOOST_PP_SEQ_SIZE(type),TYPE_I,type)

// ======

// A0 = (z,name,path,CD) where
//     z: the next available recursion depth for REPEAT
//     name: the function name to generate
//     path: the path to the current node in the definitional tree (a sequence of ints)
//     CD: the constructor definition at the current pdt node
#define A0(z,name,path,type) (z,name,path,type)
#define A0_Z(A0)    BOOST_PP_TUPLE_ELEM(4,0,A0)
#define A0_NAME(A0) BOOST_PP_TUPLE_ELEM(4,1,A0)
#define A0_PATH(A0) BOOST_PP_TUPLE_ELEM(4,2,A0)
#define A0_CD(A0)   BOOST_PP_TUPLE_ELEM(4,3,A0)

// A1 = (A0,type,pdts)
//     A0: an A0 structure
//     type: the type at the current inductive position
//     pdts: an array of pdts derived by removing the root from a previous pdt

#define A1(A0,type,pdts) (A0,type,pdts)
#define A1_A0(A1)   BOOST_PP_TUPLE_ELEM(3,0,A1)
#define A1_TYPE(A1) BOOST_PP_TUPLE_ELEM(3,1,A1)
#define A1_PDTS(A1) BOOST_PP_TUPLE_ELEM(3,2,A1)
#define A1_TO_A0(A1,z,n) A1_TO_A0_I(A1_A0(A1),A1_TYPE(A1),A1_PDTS(A1),z,n)
#define A1_TO_A0_I(A0,type,pdts,z,n)                                                      \
    /*A0*/(z,A0_NAME(A0),BOOST_PP_SEQ_PUSH_BACK(A0_PATH(A0),n),BOOST_PP_SEQ_ELEM(n,type)) \
  /**/

#define BEGIN_FUNCTION(A0, suffix) void FUNCTION_NAME(A0, suffix)() {
#define END_FUNCTION }

#define FUNCTION_NAME(A0, suffix) BOOST_PP_CAT(FN_I(A0_NAME(A0),A0_PATH(A0)), suffix)
#define FN_I(name,path) FN_III(name,BOOST_PP_SEQ_POP_FRONT(BOOST_PP_SEQ_TRANSFORM(FN_II,_,path)))
#define FN_II(s,data,elem) BOOST_PP_CAT(data,elem)
#define FN_III(name,path) FN_IV(BOOST_PP_SEQ_PUSH_FRONT(path,name))
#define FN_IV(path) BOOST_PP_SEQ_CAT(path())

#define INVOKER_NAME(A0, suffix) BOOST_PP_CAT(invoke_, FUNCTION_NAME(A0, suffix))

#define CALL(macro,A0) BOOST_PP_CAT(macro##_,A0_Z(A0))
#define REPEAT(A0) CALL(REPEAT,A0)

#define DEFINITIONAL_TREE(...)                                           \
    DT_START(A0(1,dt,BOOST_PP_SEQ_NIL,),TUPLE_TO_ARRAY(((__VA_ARGS__)))) \
  /**/
#define DT_START(A0,pdts) CALL(DT_I,A0)(CALL(DT_II,A0),A0,((this_type,,)),pdts)

#define DTB_I(A0,pos,type,...)                                              \
    /* The number of constructors in type must match the number of extra */ \
    /* args provided.                                                    */ \
    BOOST_PP_ASSERT(                                                        \
        BOOST_PP_EQUAL(BOOST_PP_SEQ_SIZE(type), VA_LEN(__VA_ARGS__))        \
      )                                                                     \
                                                                            \
    /* Define the function to handle this branch in the DTree. */           \
    static BEGIN_FUNCTION(A0,)                                              \
      static procedure vtable[] = { &fail, &fwd, &choice, &oper             \
          REPEAT(A0)(VA_LEN(__VA_ARGS__),DTB_II,A0)                         \
        };                                                                  \
      TABLE_CALL(pos, vtable)                                               \
    END_FUNCTION                                                            \
  /**/
#define DTB_II(z,n,A0) , &this_type::FUNCTION_NAME(A0, _##n)

#define DTL(A0,rule)                              \
    static BEGIN_FUNCTION(A0,)                    \
      typedef CD_IDENT(A0_CD(A0)) inductive_type; \
      rule                                        \
    END_FUNCTION                                  \
  /**/

#define TUPLE_TO_ARRAY(z) (VA_LEN z,z)

#define VA_LEN(...) VA_LEN_I(__VA_ARGS__,8,7,6,5,4,3,2,1)
#define VA_LEN_I(_1,_2,_3,_4,_5,_6,_7,_8,n,...) n

#define DT_I_1(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_1(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_1(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_1(x) x
#define DT_V_1(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_1(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_1(A0,rule) DTL(A0,rule)


#define DT_I_2(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_2(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_2(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_2(x) x
#define DT_V_2(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_2(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_2(A0,rule) DTL(A0,rule)


#define DT_I_3(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_3(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_3(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_3(x) x
#define DT_V_3(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_3(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_3(A0,rule) DTL(A0,rule)


#define DT_I_4(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_4(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_4(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_4(x) x
#define DT_V_4(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_4(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_4(A0,rule) DTL(A0,rule)


#define DT_I_5(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_5(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_5(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_5(x) x
#define DT_V_5(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_5(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_5(A0,rule) DTL(A0,rule)


#define DT_I_6(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_6(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_6(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_6(x) x
#define DT_V_6(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_6(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_6(A0,rule) DTL(A0,rule)


#define DT_I_7(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_7(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_7(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_7(x) x
#define DT_V_7(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_7(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_7(A0,rule) DTL(A0,rule)


#define DT_I_8(func,A0,type,pdts) REPEAT(A0)(BOOST_PP_ARRAY_SIZE(pdts),func,A1(A0,type,pdts))
#define DT_II_8(z,n,A1) DT_III_##z(DT_V_##z,A1_TO_A0(A1,z,n),TUPLE_TO_ARRAY(BOOST_PP_ARRAY_ELEM(n,A1_PDTS(A1))))
#define DT_III_8(func,A0,pdt) CALL(DT_IV,A0)(func BOOST_PP_ARRAY_DATA(BOOST_PP_ARRAY_INSERT(pdt,1,A0)))
#define DT_IV_8(x) x
#define DT_V_8(cmd,A0,...) CALL(cmd,A0)(A0,##__VA_ARGS__)
#define DT_BRANCH_8(A0,pos,type,...)                                   \
    DTB_I(A0,pos,type,__VA_ARGS__)                                      \
    CALL(DT_I,A0)(CALL(DT_II,A0),A0,type,TUPLE_TO_ARRAY((__VA_ARGS__))) \
  /**/
#define DT_LEAF_8(A0,rule) DTL(A0,rule)

#define REPEAT_1(c,m,d) REPEAT_1_I(c,m,d)
#define REPEAT_1_I(c,m,d) REPEAT_1_##c(m,d)
#define REPEAT_2(c,m,d) REPEAT_2_I(c,m,d)
#define REPEAT_2_I(c,m,d) REPEAT_2_##c(m,d)
#define REPEAT_3(c,m,d) REPEAT_3_I(c,m,d)
#define REPEAT_3_I(c,m,d) REPEAT_3_##c(m,d)
#define REPEAT_4(c,m,d) REPEAT_4_I(c,m,d)
#define REPEAT_4_I(c,m,d) REPEAT_4_##c(m,d)
#define REPEAT_5(c,m,d) REPEAT_5_I(c,m,d)
#define REPEAT_5_I(c,m,d) REPEAT_5_##c(m,d)
#define REPEAT_6(c,m,d) REPEAT_6_I(c,m,d)
#define REPEAT_6_I(c,m,d) REPEAT_6_##c(m,d)
#define REPEAT_7(c,m,d) REPEAT_7_I(c,m,d)
#define REPEAT_7_I(c,m,d) REPEAT_7_##c(m,d)
#define REPEAT_8(c,m,d) REPEAT_8_I(c,m,d)
#define REPEAT_8_I(c,m,d) REPEAT_8_##c(m,d)
#define REPEAT_9(c,m,d) BOOST_PP_ERROR(0x0003)
#define REPEAT_1_0(m,d)
#define REPEAT_1_1(m,d) REPEAT_1_0(m,d) m(2,0,d)
#define REPEAT_1_2(m,d) REPEAT_1_1(m,d) m(2,1,d)
#define REPEAT_1_3(m,d) REPEAT_1_2(m,d) m(2,2,d)
#define REPEAT_1_4(m,d) REPEAT_1_3(m,d) m(2,3,d)
#define REPEAT_1_5(m,d) REPEAT_1_4(m,d) m(2,4,d)
#define REPEAT_1_6(m,d) REPEAT_1_5(m,d) m(2,5,d)
#define REPEAT_1_7(m,d) REPEAT_1_6(m,d) m(2,6,d)
#define REPEAT_1_8(m,d) REPEAT_1_7(m,d) m(2,7,d)
#define REPEAT_1_9(m,d) REPEAT_1_8(m,d) m(2,8,d)
#define REPEAT_1_10(m,d) REPEAT_1_9(m,d) m(2,9,d)
#define REPEAT_1_11(m,d) REPEAT_1_10(m,d) m(2,10,d)
#define REPEAT_1_12(m,d) REPEAT_1_11(m,d) m(2,11,d)
#define REPEAT_1_13(m,d) REPEAT_1_12(m,d) m(2,12,d)
#define REPEAT_1_14(m,d) REPEAT_1_13(m,d) m(2,13,d)
#define REPEAT_1_15(m,d) REPEAT_1_14(m,d) m(2,14,d)
#define REPEAT_1_16(m,d) REPEAT_1_15(m,d) m(2,15,d)
#define REPEAT_1_17(m,d) REPEAT_1_16(m,d) m(2,16,d)
#define REPEAT_1_18(m,d) REPEAT_1_17(m,d) m(2,17,d)
#define REPEAT_1_19(m,d) REPEAT_1_18(m,d) m(2,18,d)
#define REPEAT_1_20(m,d) REPEAT_1_19(m,d) m(2,19,d)
#define REPEAT_1_21(m,d) REPEAT_1_20(m,d) m(2,20,d)
#define REPEAT_1_22(m,d) REPEAT_1_21(m,d) m(2,21,d)
#define REPEAT_1_23(m,d) REPEAT_1_22(m,d) m(2,22,d)
#define REPEAT_1_24(m,d) REPEAT_1_23(m,d) m(2,23,d)
#define REPEAT_1_25(m,d) REPEAT_1_24(m,d) m(2,24,d)
#define REPEAT_1_26(m,d) REPEAT_1_25(m,d) m(2,25,d)
#define REPEAT_1_27(m,d) REPEAT_1_26(m,d) m(2,26,d)
#define REPEAT_1_28(m,d) REPEAT_1_27(m,d) m(2,27,d)
#define REPEAT_1_29(m,d) REPEAT_1_28(m,d) m(2,28,d)
#define REPEAT_1_30(m,d) REPEAT_1_29(m,d) m(2,29,d)
#define REPEAT_1_31(m,d) REPEAT_1_30(m,d) m(2,30,d)
#define REPEAT_1_32(m,d) REPEAT_1_31(m,d) m(2,31,d)
#define REPEAT_2_0(m,d)
#define REPEAT_2_1(m,d) REPEAT_2_0(m,d) m(3,0,d)
#define REPEAT_2_2(m,d) REPEAT_2_1(m,d) m(3,1,d)
#define REPEAT_2_3(m,d) REPEAT_2_2(m,d) m(3,2,d)
#define REPEAT_2_4(m,d) REPEAT_2_3(m,d) m(3,3,d)
#define REPEAT_2_5(m,d) REPEAT_2_4(m,d) m(3,4,d)
#define REPEAT_2_6(m,d) REPEAT_2_5(m,d) m(3,5,d)
#define REPEAT_2_7(m,d) REPEAT_2_6(m,d) m(3,6,d)
#define REPEAT_2_8(m,d) REPEAT_2_7(m,d) m(3,7,d)
#define REPEAT_2_9(m,d) REPEAT_2_8(m,d) m(3,8,d)
#define REPEAT_2_10(m,d) REPEAT_2_9(m,d) m(3,9,d)
#define REPEAT_2_11(m,d) REPEAT_2_10(m,d) m(3,10,d)
#define REPEAT_2_12(m,d) REPEAT_2_11(m,d) m(3,11,d)
#define REPEAT_2_13(m,d) REPEAT_2_12(m,d) m(3,12,d)
#define REPEAT_2_14(m,d) REPEAT_2_13(m,d) m(3,13,d)
#define REPEAT_2_15(m,d) REPEAT_2_14(m,d) m(3,14,d)
#define REPEAT_2_16(m,d) REPEAT_2_15(m,d) m(3,15,d)
#define REPEAT_2_17(m,d) REPEAT_2_16(m,d) m(3,16,d)
#define REPEAT_2_18(m,d) REPEAT_2_17(m,d) m(3,17,d)
#define REPEAT_2_19(m,d) REPEAT_2_18(m,d) m(3,18,d)
#define REPEAT_2_20(m,d) REPEAT_2_19(m,d) m(3,19,d)
#define REPEAT_2_21(m,d) REPEAT_2_20(m,d) m(3,20,d)
#define REPEAT_2_22(m,d) REPEAT_2_21(m,d) m(3,21,d)
#define REPEAT_2_23(m,d) REPEAT_2_22(m,d) m(3,22,d)
#define REPEAT_2_24(m,d) REPEAT_2_23(m,d) m(3,23,d)
#define REPEAT_2_25(m,d) REPEAT_2_24(m,d) m(3,24,d)
#define REPEAT_2_26(m,d) REPEAT_2_25(m,d) m(3,25,d)
#define REPEAT_2_27(m,d) REPEAT_2_26(m,d) m(3,26,d)
#define REPEAT_2_28(m,d) REPEAT_2_27(m,d) m(3,27,d)
#define REPEAT_2_29(m,d) REPEAT_2_28(m,d) m(3,28,d)
#define REPEAT_2_30(m,d) REPEAT_2_29(m,d) m(3,29,d)
#define REPEAT_2_31(m,d) REPEAT_2_30(m,d) m(3,30,d)
#define REPEAT_2_32(m,d) REPEAT_2_31(m,d) m(3,31,d)
#define REPEAT_3_0(m,d)
#define REPEAT_3_1(m,d) REPEAT_3_0(m,d) m(4,0,d)
#define REPEAT_3_2(m,d) REPEAT_3_1(m,d) m(4,1,d)
#define REPEAT_3_3(m,d) REPEAT_3_2(m,d) m(4,2,d)
#define REPEAT_3_4(m,d) REPEAT_3_3(m,d) m(4,3,d)
#define REPEAT_3_5(m,d) REPEAT_3_4(m,d) m(4,4,d)
#define REPEAT_3_6(m,d) REPEAT_3_5(m,d) m(4,5,d)
#define REPEAT_3_7(m,d) REPEAT_3_6(m,d) m(4,6,d)
#define REPEAT_3_8(m,d) REPEAT_3_7(m,d) m(4,7,d)
#define REPEAT_3_9(m,d) REPEAT_3_8(m,d) m(4,8,d)
#define REPEAT_3_10(m,d) REPEAT_3_9(m,d) m(4,9,d)
#define REPEAT_3_11(m,d) REPEAT_3_10(m,d) m(4,10,d)
#define REPEAT_3_12(m,d) REPEAT_3_11(m,d) m(4,11,d)
#define REPEAT_3_13(m,d) REPEAT_3_12(m,d) m(4,12,d)
#define REPEAT_3_14(m,d) REPEAT_3_13(m,d) m(4,13,d)
#define REPEAT_3_15(m,d) REPEAT_3_14(m,d) m(4,14,d)
#define REPEAT_3_16(m,d) REPEAT_3_15(m,d) m(4,15,d)
#define REPEAT_3_17(m,d) REPEAT_3_16(m,d) m(4,16,d)
#define REPEAT_3_18(m,d) REPEAT_3_17(m,d) m(4,17,d)
#define REPEAT_3_19(m,d) REPEAT_3_18(m,d) m(4,18,d)
#define REPEAT_3_20(m,d) REPEAT_3_19(m,d) m(4,19,d)
#define REPEAT_3_21(m,d) REPEAT_3_20(m,d) m(4,20,d)
#define REPEAT_3_22(m,d) REPEAT_3_21(m,d) m(4,21,d)
#define REPEAT_3_23(m,d) REPEAT_3_22(m,d) m(4,22,d)
#define REPEAT_3_24(m,d) REPEAT_3_23(m,d) m(4,23,d)
#define REPEAT_3_25(m,d) REPEAT_3_24(m,d) m(4,24,d)
#define REPEAT_3_26(m,d) REPEAT_3_25(m,d) m(4,25,d)
#define REPEAT_3_27(m,d) REPEAT_3_26(m,d) m(4,26,d)
#define REPEAT_3_28(m,d) REPEAT_3_27(m,d) m(4,27,d)
#define REPEAT_3_29(m,d) REPEAT_3_28(m,d) m(4,28,d)
#define REPEAT_3_30(m,d) REPEAT_3_29(m,d) m(4,29,d)
#define REPEAT_3_31(m,d) REPEAT_3_30(m,d) m(4,30,d)
#define REPEAT_3_32(m,d) REPEAT_3_31(m,d) m(4,31,d)
#define REPEAT_4_0(m,d)
#define REPEAT_4_1(m,d) REPEAT_4_0(m,d) m(5,0,d)
#define REPEAT_4_2(m,d) REPEAT_4_1(m,d) m(5,1,d)
#define REPEAT_4_3(m,d) REPEAT_4_2(m,d) m(5,2,d)
#define REPEAT_4_4(m,d) REPEAT_4_3(m,d) m(5,3,d)
#define REPEAT_4_5(m,d) REPEAT_4_4(m,d) m(5,4,d)
#define REPEAT_4_6(m,d) REPEAT_4_5(m,d) m(5,5,d)
#define REPEAT_4_7(m,d) REPEAT_4_6(m,d) m(5,6,d)
#define REPEAT_4_8(m,d) REPEAT_4_7(m,d) m(5,7,d)
#define REPEAT_4_9(m,d) REPEAT_4_8(m,d) m(5,8,d)
#define REPEAT_4_10(m,d) REPEAT_4_9(m,d) m(5,9,d)
#define REPEAT_4_11(m,d) REPEAT_4_10(m,d) m(5,10,d)
#define REPEAT_4_12(m,d) REPEAT_4_11(m,d) m(5,11,d)
#define REPEAT_4_13(m,d) REPEAT_4_12(m,d) m(5,12,d)
#define REPEAT_4_14(m,d) REPEAT_4_13(m,d) m(5,13,d)
#define REPEAT_4_15(m,d) REPEAT_4_14(m,d) m(5,14,d)
#define REPEAT_4_16(m,d) REPEAT_4_15(m,d) m(5,15,d)
#define REPEAT_4_17(m,d) REPEAT_4_16(m,d) m(5,16,d)
#define REPEAT_4_18(m,d) REPEAT_4_17(m,d) m(5,17,d)
#define REPEAT_4_19(m,d) REPEAT_4_18(m,d) m(5,18,d)
#define REPEAT_4_20(m,d) REPEAT_4_19(m,d) m(5,19,d)
#define REPEAT_4_21(m,d) REPEAT_4_20(m,d) m(5,20,d)
#define REPEAT_4_22(m,d) REPEAT_4_21(m,d) m(5,21,d)
#define REPEAT_4_23(m,d) REPEAT_4_22(m,d) m(5,22,d)
#define REPEAT_4_24(m,d) REPEAT_4_23(m,d) m(5,23,d)
#define REPEAT_4_25(m,d) REPEAT_4_24(m,d) m(5,24,d)
#define REPEAT_4_26(m,d) REPEAT_4_25(m,d) m(5,25,d)
#define REPEAT_4_27(m,d) REPEAT_4_26(m,d) m(5,26,d)
#define REPEAT_4_28(m,d) REPEAT_4_27(m,d) m(5,27,d)
#define REPEAT_4_29(m,d) REPEAT_4_28(m,d) m(5,28,d)
#define REPEAT_4_30(m,d) REPEAT_4_29(m,d) m(5,29,d)
#define REPEAT_4_31(m,d) REPEAT_4_30(m,d) m(5,30,d)
#define REPEAT_4_32(m,d) REPEAT_4_31(m,d) m(5,31,d)
#define REPEAT_5_0(m,d)
#define REPEAT_5_1(m,d) REPEAT_5_0(m,d) m(6,0,d)
#define REPEAT_5_2(m,d) REPEAT_5_1(m,d) m(6,1,d)
#define REPEAT_5_3(m,d) REPEAT_5_2(m,d) m(6,2,d)
#define REPEAT_5_4(m,d) REPEAT_5_3(m,d) m(6,3,d)
#define REPEAT_5_5(m,d) REPEAT_5_4(m,d) m(6,4,d)
#define REPEAT_5_6(m,d) REPEAT_5_5(m,d) m(6,5,d)
#define REPEAT_5_7(m,d) REPEAT_5_6(m,d) m(6,6,d)
#define REPEAT_5_8(m,d) REPEAT_5_7(m,d) m(6,7,d)
#define REPEAT_5_9(m,d) REPEAT_5_8(m,d) m(6,8,d)
#define REPEAT_5_10(m,d) REPEAT_5_9(m,d) m(6,9,d)
#define REPEAT_5_11(m,d) REPEAT_5_10(m,d) m(6,10,d)
#define REPEAT_5_12(m,d) REPEAT_5_11(m,d) m(6,11,d)
#define REPEAT_5_13(m,d) REPEAT_5_12(m,d) m(6,12,d)
#define REPEAT_5_14(m,d) REPEAT_5_13(m,d) m(6,13,d)
#define REPEAT_5_15(m,d) REPEAT_5_14(m,d) m(6,14,d)
#define REPEAT_5_16(m,d) REPEAT_5_15(m,d) m(6,15,d)
#define REPEAT_5_17(m,d) REPEAT_5_16(m,d) m(6,16,d)
#define REPEAT_5_18(m,d) REPEAT_5_17(m,d) m(6,17,d)
#define REPEAT_5_19(m,d) REPEAT_5_18(m,d) m(6,18,d)
#define REPEAT_5_20(m,d) REPEAT_5_19(m,d) m(6,19,d)
#define REPEAT_5_21(m,d) REPEAT_5_20(m,d) m(6,20,d)
#define REPEAT_5_22(m,d) REPEAT_5_21(m,d) m(6,21,d)
#define REPEAT_5_23(m,d) REPEAT_5_22(m,d) m(6,22,d)
#define REPEAT_5_24(m,d) REPEAT_5_23(m,d) m(6,23,d)
#define REPEAT_5_25(m,d) REPEAT_5_24(m,d) m(6,24,d)
#define REPEAT_5_26(m,d) REPEAT_5_25(m,d) m(6,25,d)
#define REPEAT_5_27(m,d) REPEAT_5_26(m,d) m(6,26,d)
#define REPEAT_5_28(m,d) REPEAT_5_27(m,d) m(6,27,d)
#define REPEAT_5_29(m,d) REPEAT_5_28(m,d) m(6,28,d)
#define REPEAT_5_30(m,d) REPEAT_5_29(m,d) m(6,29,d)
#define REPEAT_5_31(m,d) REPEAT_5_30(m,d) m(6,30,d)
#define REPEAT_5_32(m,d) REPEAT_5_31(m,d) m(6,31,d)
#define REPEAT_6_0(m,d)
#define REPEAT_6_1(m,d) REPEAT_6_0(m,d) m(7,0,d)
#define REPEAT_6_2(m,d) REPEAT_6_1(m,d) m(7,1,d)
#define REPEAT_6_3(m,d) REPEAT_6_2(m,d) m(7,2,d)
#define REPEAT_6_4(m,d) REPEAT_6_3(m,d) m(7,3,d)
#define REPEAT_6_5(m,d) REPEAT_6_4(m,d) m(7,4,d)
#define REPEAT_6_6(m,d) REPEAT_6_5(m,d) m(7,5,d)
#define REPEAT_6_7(m,d) REPEAT_6_6(m,d) m(7,6,d)
#define REPEAT_6_8(m,d) REPEAT_6_7(m,d) m(7,7,d)
#define REPEAT_6_9(m,d) REPEAT_6_8(m,d) m(7,8,d)
#define REPEAT_6_10(m,d) REPEAT_6_9(m,d) m(7,9,d)
#define REPEAT_6_11(m,d) REPEAT_6_10(m,d) m(7,10,d)
#define REPEAT_6_12(m,d) REPEAT_6_11(m,d) m(7,11,d)
#define REPEAT_6_13(m,d) REPEAT_6_12(m,d) m(7,12,d)
#define REPEAT_6_14(m,d) REPEAT_6_13(m,d) m(7,13,d)
#define REPEAT_6_15(m,d) REPEAT_6_14(m,d) m(7,14,d)
#define REPEAT_6_16(m,d) REPEAT_6_15(m,d) m(7,15,d)
#define REPEAT_6_17(m,d) REPEAT_6_16(m,d) m(7,16,d)
#define REPEAT_6_18(m,d) REPEAT_6_17(m,d) m(7,17,d)
#define REPEAT_6_19(m,d) REPEAT_6_18(m,d) m(7,18,d)
#define REPEAT_6_20(m,d) REPEAT_6_19(m,d) m(7,19,d)
#define REPEAT_6_21(m,d) REPEAT_6_20(m,d) m(7,20,d)
#define REPEAT_6_22(m,d) REPEAT_6_21(m,d) m(7,21,d)
#define REPEAT_6_23(m,d) REPEAT_6_22(m,d) m(7,22,d)
#define REPEAT_6_24(m,d) REPEAT_6_23(m,d) m(7,23,d)
#define REPEAT_6_25(m,d) REPEAT_6_24(m,d) m(7,24,d)
#define REPEAT_6_26(m,d) REPEAT_6_25(m,d) m(7,25,d)
#define REPEAT_6_27(m,d) REPEAT_6_26(m,d) m(7,26,d)
#define REPEAT_6_28(m,d) REPEAT_6_27(m,d) m(7,27,d)
#define REPEAT_6_29(m,d) REPEAT_6_28(m,d) m(7,28,d)
#define REPEAT_6_30(m,d) REPEAT_6_29(m,d) m(7,29,d)
#define REPEAT_6_31(m,d) REPEAT_6_30(m,d) m(7,30,d)
#define REPEAT_6_32(m,d) REPEAT_6_31(m,d) m(7,31,d)
#define REPEAT_7_0(m,d)
#define REPEAT_7_1(m,d) REPEAT_7_0(m,d) m(8,0,d)
#define REPEAT_7_2(m,d) REPEAT_7_1(m,d) m(8,1,d)
#define REPEAT_7_3(m,d) REPEAT_7_2(m,d) m(8,2,d)
#define REPEAT_7_4(m,d) REPEAT_7_3(m,d) m(8,3,d)
#define REPEAT_7_5(m,d) REPEAT_7_4(m,d) m(8,4,d)
#define REPEAT_7_6(m,d) REPEAT_7_5(m,d) m(8,5,d)
#define REPEAT_7_7(m,d) REPEAT_7_6(m,d) m(8,6,d)
#define REPEAT_7_8(m,d) REPEAT_7_7(m,d) m(8,7,d)
#define REPEAT_7_9(m,d) REPEAT_7_8(m,d) m(8,8,d)
#define REPEAT_7_10(m,d) REPEAT_7_9(m,d) m(8,9,d)
#define REPEAT_7_11(m,d) REPEAT_7_10(m,d) m(8,10,d)
#define REPEAT_7_12(m,d) REPEAT_7_11(m,d) m(8,11,d)
#define REPEAT_7_13(m,d) REPEAT_7_12(m,d) m(8,12,d)
#define REPEAT_7_14(m,d) REPEAT_7_13(m,d) m(8,13,d)
#define REPEAT_7_15(m,d) REPEAT_7_14(m,d) m(8,14,d)
#define REPEAT_7_16(m,d) REPEAT_7_15(m,d) m(8,15,d)
#define REPEAT_7_17(m,d) REPEAT_7_16(m,d) m(8,16,d)
#define REPEAT_7_18(m,d) REPEAT_7_17(m,d) m(8,17,d)
#define REPEAT_7_19(m,d) REPEAT_7_18(m,d) m(8,18,d)
#define REPEAT_7_20(m,d) REPEAT_7_19(m,d) m(8,19,d)
#define REPEAT_7_21(m,d) REPEAT_7_20(m,d) m(8,20,d)
#define REPEAT_7_22(m,d) REPEAT_7_21(m,d) m(8,21,d)
#define REPEAT_7_23(m,d) REPEAT_7_22(m,d) m(8,22,d)
#define REPEAT_7_24(m,d) REPEAT_7_23(m,d) m(8,23,d)
#define REPEAT_7_25(m,d) REPEAT_7_24(m,d) m(8,24,d)
#define REPEAT_7_26(m,d) REPEAT_7_25(m,d) m(8,25,d)
#define REPEAT_7_27(m,d) REPEAT_7_26(m,d) m(8,26,d)
#define REPEAT_7_28(m,d) REPEAT_7_27(m,d) m(8,27,d)
#define REPEAT_7_29(m,d) REPEAT_7_28(m,d) m(8,28,d)
#define REPEAT_7_30(m,d) REPEAT_7_29(m,d) m(8,29,d)
#define REPEAT_7_31(m,d) REPEAT_7_30(m,d) m(8,30,d)
#define REPEAT_7_32(m,d) REPEAT_7_31(m,d) m(8,31,d)
#define REPEAT_8_0(m,d)
#define REPEAT_8_1(m,d) REPEAT_8_0(m,d) m(9,0,d)
#define REPEAT_8_2(m,d) REPEAT_8_1(m,d) m(9,1,d)
#define REPEAT_8_3(m,d) REPEAT_8_2(m,d) m(9,2,d)
#define REPEAT_8_4(m,d) REPEAT_8_3(m,d) m(9,3,d)
#define REPEAT_8_5(m,d) REPEAT_8_4(m,d) m(9,4,d)
#define REPEAT_8_6(m,d) REPEAT_8_5(m,d) m(9,5,d)
#define REPEAT_8_7(m,d) REPEAT_8_6(m,d) m(9,6,d)
#define REPEAT_8_8(m,d) REPEAT_8_7(m,d) m(9,7,d)
#define REPEAT_8_9(m,d) REPEAT_8_8(m,d) m(9,8,d)
#define REPEAT_8_10(m,d) REPEAT_8_9(m,d) m(9,9,d)
#define REPEAT_8_11(m,d) REPEAT_8_10(m,d) m(9,10,d)
#define REPEAT_8_12(m,d) REPEAT_8_11(m,d) m(9,11,d)
#define REPEAT_8_13(m,d) REPEAT_8_12(m,d) m(9,12,d)
#define REPEAT_8_14(m,d) REPEAT_8_13(m,d) m(9,13,d)
#define REPEAT_8_15(m,d) REPEAT_8_14(m,d) m(9,14,d)
#define REPEAT_8_16(m,d) REPEAT_8_15(m,d) m(9,15,d)
#define REPEAT_8_17(m,d) REPEAT_8_16(m,d) m(9,16,d)
#define REPEAT_8_18(m,d) REPEAT_8_17(m,d) m(9,17,d)
#define REPEAT_8_19(m,d) REPEAT_8_18(m,d) m(9,18,d)
#define REPEAT_8_20(m,d) REPEAT_8_19(m,d) m(9,19,d)
#define REPEAT_8_21(m,d) REPEAT_8_20(m,d) m(9,20,d)
#define REPEAT_8_22(m,d) REPEAT_8_21(m,d) m(9,21,d)
#define REPEAT_8_23(m,d) REPEAT_8_22(m,d) m(9,22,d)
#define REPEAT_8_24(m,d) REPEAT_8_23(m,d) m(9,23,d)
#define REPEAT_8_25(m,d) REPEAT_8_24(m,d) m(9,24,d)
#define REPEAT_8_26(m,d) REPEAT_8_25(m,d) m(9,25,d)
#define REPEAT_8_27(m,d) REPEAT_8_26(m,d) m(9,26,d)
#define REPEAT_8_28(m,d) REPEAT_8_27(m,d) m(9,27,d)
#define REPEAT_8_29(m,d) REPEAT_8_28(m,d) m(9,28,d)
#define REPEAT_8_30(m,d) REPEAT_8_29(m,d) m(9,29,d)
#define REPEAT_8_31(m,d) REPEAT_8_30(m,d) m(9,30,d)
#define REPEAT_8_32(m,d) REPEAT_8_31(m,d) m(9,31,d)
